step14:
-------
	Add routing logic for EmployeeListComponent inside App.js file.

App.js
-------
import React from 'react'
import HeaderComponent from './components/HeaderComponent'
import EmployeeListComponent from './components/EmployeeListComponent'
import FooterComponent from './components/FooterComponent'
import {BrowserRouter, Routes, Route} from 'react-router-dom';
import './App.css';

function App() {
  return (
    <div className='bgColor'>

        <HeaderComponent/>

        <BrowserRouter>

        <div className='container mt-3'>
          <Routes>
              <Route exact path='/' element={<EmployeeListComponent/>}></Route>
              <Route path='/employees' element={<EmployeeListComponent/>}></Route>
          </Routes>
        </div>

        </BrowserRouter>

        <FooterComponent/>
        
    </div>
  )
}

export default App


step15:
-------
	Test the application by using below request url.
	ex:
		http://localhost:3000/
		http://localhost:3000/employees 

step16:
-------
	Install react typewriter library.
	ex:
		npm install react-simple-typewriter 


step17:
------
	Add react typwriting effect logic inside EmployeeListComponent.js file.

EmployeeListComponent.js
-------------------------
import React from 'react'
import { useState } from 'react'
import {useTypewriter,Cursor} from 'react-simple-typewriter';

function EmployeeListComponent() 
{

   const [text] = useTypewriter({
    words : ["Details", "List", "Info"],
    loop : true,
    typeSpeed:120,
    deleteSpeed:80
   })  

  const [employees,setEmployees]= useState([]);

  return (
    <div className='container mt-5'>

        <h4 className='text-center'> Employee {text}<Cursor/> </h4>

        <div className='row mt-5'>
        <table className='table table-bordered table-striped'>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>DOJ</th>
                    <th>Department</th>
                    <th>Designation</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {
                    employees.map(employee =>{
                        return <tr key={employee.id}>
                                    <td>{employee.id}</td>
                                    <td>{employee.name}</td>
                                    <td>{employee.doj}</td>
                                    <td>{employee.dept.departName}</td>
                                    <td>{employee.dept.designation}</td>
                                    <td></td>
                                </tr>
                    })
                }
            </tbody>
        </table>
        </div>
    </div>
  )
}

export default EmployeeListComponent


Project Structure 
-----------------
backend
|
|---src/main/java
|	|	
	|---com.ihub.www (base package)
	|
	|---com.ihub.www.model 
		|
		|---Employee.java
		|---Department.java
	
	|---com.ihub.www.repo
		|
		|---EmployeeRepository.java (interface)
		|---DepartmentRepository.java (interface)

	|---com.ihub.www.service
		|
		|---EmployeeService.java 
	
	|---com.ihub.www.controller
		|
		|---EmployeeController.java

	|---com.ihub.www.exception	
		|
		|---ResourceNotFoundException.java
|
|---src/main/resources
|	|
	|---application.properties 
|
|---src/test/java
|
|---pom.xml 
|

step18:
-------
	Create a spring boot starter project i.e  backend.
	ex:
		starter : 
				Spring Web 
				Spring Data JPA
				MySQL Driver 
				Lombok 
				Spring Boot DevTools 

step19:
------
	Create a Employee model class inside "com.ihub.www.model" package.

Employee.java
-------------
package com.ihub.www.model;

import java.util.Date;

import com.fasterxml.jackson.annotation.JsonFormat;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="employees")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Transactional
public class Employee 
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column
	private String name;
	
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern="dd-MM-yyyy")
	private Date doj;
	
	@OneToOne(cascade =  CascadeType.ALL)
	@JoinColumn(name ="deptId")
	private Department dept;
}



step20:
------
	Create a Department model class inside "com.ihub.www.model" package.

Department.java
--------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Department 
{
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long deptId;
	
	@Column
	private String deptName;
	
	@Column
	private String designation;
}

step21:
------
	Create a EmployeeRepository.java file inside "com.ihub.www.repo" package.

EmployeeRepository.java
-------------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>
{
	
}

step22:
------
	Create a DepartmentRepository.java file inside "com.ihub.www.repo" package.

DepartmentRepository.java
--------------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Department;

@Repository
public interface DepartmentRepository extends JpaRepository<Department, Long>
{

}


step23:
-------
	Create a custom ResourceNotFoundException inside "com.ihub.www.exception" package.

ResourceNotFoundException.java
-------------------------------
package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException
{
	public ResourceNotFoundException(String msg)
	{
		super(msg);
	}
}

step24:
------
	Connect to mysql workbench for creating schema.
	ex:
		create schema employee_management_system

		use employee_management_system 

step25:
-------
	Configure application name, server port, mysql database properties and hibernate properties 
	inside application.properties file.

application.properties 
----------------------
spring.application.name=backend

server.port = 9191


spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
spring.datasource.url= jdbc:mysql://localhost:3306/employee_management_system
spring.datasource.username= root 
spring.datasource.password= root 


spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MYSQL8Dialect
spring.jpa.hibernate.ddl-auto= update











































